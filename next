have code with diffie hellman
Need to encode using password next to convert to eke
Also learn about json and socketserver

Meeting
    2**256 - print and see output in python (built in)
    AES - encyption
    arbitrary precision arithmetic - exponentiation, modulus for large numbers- book
        - add, subtract and other arithmestic register operations for when numbers are larger than register size
    find different language - which does not have implementation for this stuff
    Cobolt - dead language
----------------------------------------------------------------------------------
week9
Next - 
look at spake in overview paper

checking for large numbers
    - replaced p with 1024 bit random number
    - TODO - replace g with primitive root of p
    - replaced key with scrypt(key) - [common secret key]
    - TODO - figure out what to do with the salt
    - TODO - figure out secret key

TODO - print statement manage

--------------------------------------------------------------------------
week 11
Stuck 
Cannot find primitive root of modulus
- look at function to generate prime factors for large numbers
    + Can not find this. Can not get generator without this.
- look at sPAKE from overview paper
- look at the number theory book for other hints
    + Need to find a primitive root. Do not think there is another option

meeting -
look at existing implementations of diffie hellman to see how they genreate this stuff
and the 2 links sent in email

--------------------------------------------------------------------------------------
link 1
https://crypto.stackexchange.com/questions/87137/how-to-get-the-order-of-a-group-generator-in-dh

If p is a safe prime, and (p mod 8 = +- 1), then 2 is a generator
    problem:
        - Need to check if number is prime to get a safe prime
        - This takes too long
        - Can look at Miller-Rabin primality test
If p is a safe prime, (p=2q+1), then take any random x such that (g^2 != 1) and (g^q == 1)
    problem:
        - I do not understand why such a number can be a generator. Hence, I am not sure if this is correct.

link2
https://crypto.stackexchange.com/questions/87137/how-to-get-the-order-of-a-group-generator-in-dh

code for second inference from first link

-----------------------------------------------------------------------------------------

I tried implementing link 2. which is the same as second point from link 1
 - miller rabin test -> Used bignum book - can test if prime quickly now
 - might need to look at quick exponentiation
 - code runs fast
 - Need to find a way to get safe prime
 ------------------------------------------
  
  week 12

- Corrected dh parameter generation
- leftover tasks
    - TODO - figure out what to do with the salt
    - TODO - figure out secret key
    - TODO - print statement manage

Ask in meeting -Meeting 
    - Is it okay to have secret exponent = prime(256 bits)
Look at key generation and salt

Meeting - 
Look up for DH key sizes these websites - so I can referecnce it
NIST
ISO

Look up PAKE with explicit authentication.
    - Say I have improved with scrypt.
    - Explain why I need it. I need to send challenges. Need to use scrypt to be able to use key for AES encyption
    - It is okay to have the same salt


Tasks for Christmas
    - Start the report 
    - salt - check if it is okay to have a fixed salt value in the class
    - secret exponent size check online
    - manage print statements

-------------------------------------------------------------
Christmas
    - Think salt is okay. Does not matter that much
    - size = 2048
    - leaving print statements

---------------------------------------------------------------
Meeting (2/2/24)- WEEK1
TLS needs public infrastructure - like third party certificate. Need to trust third party. Heavier infrastructure. More assumptions
EKE - only need to agreee on password. No other infrastructure


BIBtex citations
DBLP.org - references
    search for paper. Get BiBTex

Cite webpage - MISC - find proper way
@Book - same as webpage

move diffie hellman to background
do not start sentence with citations
change fraction bracket \left, \right

only 3.2 in chapter 3 - name it protocol description instead of design
+ describe security properties - assumptions etc

Proof - 
Assume attacker A exists who can break this protocol. If attacker exists, then we can solve a problem B. However, we can not solve B and hence, attacker A can not exist. 

explain to someone who does not know - expand on definitions etc


Evaluation
time , efficiency, make graph of runtime
vary parameter sizes and measure

run many times, store in table, plot - return average time for 1 parameter size
PGF plots latex - feed table to make graph

Stop working on code. Improve report. Research on everything and explain to someone who does not know anything. Length does not matter. Should be understandable.

------------------------------------------------------------------
TODO
    - TLS - DONE
    - References
    - Move DH to background - DONE
    - explain parameter math in detail - DONE
    - fix math notation - DONE
    - rename sections
    - explain security - proof, properties etc
    - evaluation - script and graph
    - expand on everything - include definitions etc.
    - exponent function
    - can expand on cryptographic primitives
    - can say why I chose Diffie-Hellman over RSA

Immediate TODO
    - add encryption to send/receive message functions

Order of TODO
    - explain implementation - DONE
    - evaluation
    - Security
    - exponent - affecting runtime
    - handle when different key/ challenge fails

------------------------------------------------
Meeting - 16/02/24
preliminaries - name for mathematical concepts - DONE
diffie hellman then EKE - change order - DONE
name implementation something else